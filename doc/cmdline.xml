<?xml version="1.0"?>
<docset>
<navpath>
<navitem href="index.html">Maike</navitem>
</navpath>
<h1>Command line interfaces</h1>

<p>The tool Maike is launched from the command line. This page contains a list of all command line options that Maike accepts. An entity within square brackets is optional.</p>
<summary style="margin-left:2em;margin-bottom:2ex">
<h2>--help[=string]</h2>
<p>    Print this message to <code>stdout</code>, or to the given file, and exit.</p>

<h2>--load-path[=string]</h2>
<p>    Print the load path of the Maike executable to <code>stdout</code>, or the given file, and exit.</p>

<h2>--version[=string]</h2>
<p>    Print version information to <code>stdout</code>, or to the given file, and exit.</p>

<h2>--configclean</h2>
<p>    Do not load any system specific default configuration. In this mode, Maike will only load its build-in configuration, either followed by the file <code>maikeconfig.json</code>, if present in the current directory, or the files listed in <code>configfiles</code>. If the option <code>configfiles</code> is given, <code>maikeconfig.json</code> will not be loaded.</p>

<h2>--configdump[=string]</h2>
<p>    Print the current configuration to <code>stdout</code>, or to the given file, and exit.</p>

<h2>--configfiles=string,...</h2>
<p>    Load the listed configuration files. If this argument is not given, Maike will instead load options from files <code>maikeconfig.json</code>, found in system specific directories, and the current working,</p>

<h2>--hooks-load=string,...</h2>
<p>    Explicitly load the given target hooks. The string follows the convention <code>hookname_1</code>:<code>filename_ext</code>,...,<code>hookname_2</code>:<code>filename_ext</code>,...</p>

<h2>--no-sysvars</h2>
<p>    Do not load any default system variables. This option is useful when using a cross-compiler. Normally, Maike loads a system-dependent set of variables that identifies the host platform.</p>

<h2>--clean</h2>
<p>    Remove targets from disk. This option is like a conventional <code>make clean</code>, with the addition that the affected targets can be controlled by the <code>targets</code> option.</p>

<h2>--list-all-targets[=string]</h2>
<p>    Print all targets to the given file and exit. As default, the data is written to <code>stdout</code>.</p>

<h2>--list-external-targets[=string]</h2>
<p>    Print all external targets to the given file and exit. As default, data is written to <code>stdout</code>. External targets are targets not tracked by Maike--usually, they refer to external libraries.</p>

<h2>--list-leaf-targets[=string]</h2>
<p>    Print all leaf targets to the given file and exit. As default, data is written to <code>stdout</code>. A leaf target is a target that no other target refers to.</p>

<h2>--remove-orphans</h2>
    <p>Remove targets <em>not</em> known by Maike, from disk. This option removes the complement to <code>clean</code> targeting all targets.</p>

<h2>--targets=string,...</h2>
<p>    Only process the listed targets. This option reduces the amount of output when using any of the --dump-* options.</p>

<h2>--dump-database-json[=string]</h2>
<p>    Dump the internal database to a JSON file and exit. As default, the data is written to <code>stdout</code>.</p>

<h2>--dump-graph-dot[=string]</h2>
<p>    Dump the dependency graph to a DOT file and exit. As default, the data is written to <code>stdout</code>.</p>

<h2>--dump-graph-inv-dot[=string]</h2>
<p>    Dump an inverted dependency graph to a DOT file and exit. As default, the data is written to <code>stdout</code>.</p>

<h2>--dump-targets-tsv[=string]</h2>
<p>    Dumps information about the selected targets to a TSV (Tab Separated Values) file. As default, the data is written to <code>stdout</code>.</p>
</summary>
</docset>
