//@	{
//@	"dependencies_extra":[{"ref":"./id.o", "rel":"implementation"}]
//@	}

#ifndef MAIKE_BUILD_ID_HPP
#define MAIKE_BUILD_ID_HPP

#include "src/utils/empty.hpp"
#include "src/key_value_store/json_handle.hpp"

#include <array>

namespace Maike::Build
{
	class Id
	{
	public:
		Id();

		explicit Id(char const* cstr);

		explicit Id(std::array<std::byte, 32> const& bytes): m_bytes{bytes}
		{
		}

		auto const& bytes() const
		{
			return m_bytes;
		}

	private:
		std::array<std::byte, 32> m_bytes;
	};

	inline bool operator==(Id const& a, Id const& b)
	{
		return a.bytes() == b.bytes();
	}

	inline bool operator!=(Id const& a, Id const& b)
	{
		return !(a == b);
	}

	std::string toString(Id const& id);

	inline auto toJson(Id const& id)
	{
		return KeyValueStore::JsonHandle{toString(id).c_str()};
	}

	inline auto fromString(Empty<Id>, char const* str)
	{
		return Id{str};
	}

	constexpr inline char const* typeToString(Empty<Id>)
	{
		return "Build id";
	}

	constexpr char const* typeDescription(Empty<Id>)
	{
		return "A *Build id* is a 256-bit number, that can be used to uniqluey identify current build "
		       "job. "
		       "The value should be entered as 64 digit hexadecimal number, ie "
		       "39927ed592e3fe77e777e23e484d0a4615ad1b3d8260434945c57e97c30d049b. By default, the number "
		       "is generated by *std::random_device*.";
	}
}

#endif
