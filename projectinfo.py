#@	{
#@	"targets":
#@		[
#@			 {"name":"projectinfo.hpp","status_check":"dynamic"}
#@		]
#@	}

import sys
import subprocess
import time
import string
import json
import shutil

def write_error(*args, **kwargs):
	print(*args,file=sys.stderr,**kwargs)

def gitVersionGet():
	if shutil.which('git')==None:
		with open('versioninfo.txt') as versionfile:
			result=versionfile.read().strip()
	else:
		with subprocess.Popen(('git', 'describe','--tags','--dirty','--always')\
			,stdout=subprocess.PIPE) as git:
			result=git.stdout.read().decode().strip()
			git.wait()
			status=git.returncode

		if status:
			with open('versioninfo.txt') as versionfile:
				result=versionfile.read().strip()
		else:
			with open('versioninfo.txt','w') as versionfile:
				versionfile.write(result)

	return result

template=string.Template('''// This file has been generated by $scriptname

#ifndef MAIKE_PROJECTINFO_HPP
#define MAIKE_PROJECTINFO_HPP

#include <cstdint>

namespace Maike
	{
	class ProjectInfo
		{
		public:
			static constexpr const char* version() noexcept
				{return "$version";}

			static constexpr const char* timestamp() noexcept
				{return "$now";}

			static constexpr const char* author() noexcept
				{return "$author";}

			static constexpr int64_t year() noexcept
				{return $year;}

			static constexpr const char* yearString() noexcept
				{return "$year";}

			static constexpr const char* legalBrief() noexcept
				{return "$legal_brief";}

			static constexpr const char* name() noexcept
				{return "$name";}
		};
	}

#endif
''')

try:
	filename_out=sys.argv[1]+'/projectinfo.hpp'
	keys=json.load(open('projectinfo.json'))
	keys['scriptname']=sys.argv[0]
	keys['version']=gitVersionGet()
	keys['now']=time.strftime('%Y-%m-%d %H:%M %Z')
	with open(filename_out,mode='w') as filehandle:
		filehandle.write(template.substitute(keys))
	sys.exit(0)
	pass

except Exception:
	write_error('%s: error: %s\n'%(sys.argv[0],sys.exc_info()[1]))
	sys.exit(2)
